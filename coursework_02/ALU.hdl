// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson


/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are
 * documented in the book. In addition, the ALU
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;

    PARTS:
    Not16(x=x, out=notx);
    Not16(x=y, out=noty);
    Mux4Way16(w=x, x=false, y=notx, z=true, sel[0]=zx, sel[1]=nx, out=x1);
    Mux4Way16(w=y, x=false, y=noty, z=true, sel[0]=zy, sel[1]=ny, out=y1);
    Add16(x=x1, y=y1, out=xPlusy);
    And16(x=x1, y=y1, out=xAndy);
    Mux16(x=xAndy, y=xPlusy, sel=f, out=result);
    Not16(x=result, out=notresult);
    Mux16(x=result, y=notresult, sel=no, out=out, out[0..7]=half1, out[8..15]=half2, out[15]=firstBit);
    Or8Way(x=half1, out=out1);
    Or8Way(x=half2, out=out2);
    Or(x=out1, y=out2, out=out3);
    Xor(x=out3, y=true, out=zr);
    And(x=firstBit, y=true, out=ng);
}
