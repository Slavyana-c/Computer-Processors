// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(x=instruction[15], out=aInst);

    Mux16(x=outA, y=inM, sel=instruction[12], out=aluIn);
    ALU(x=outD, y=aluIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
      out=aluOut, out=outM, zr=zero, ng=negative);

    And(x=instruction[5], y=instruction[15], out=destA);
    Or(x=aInst, y=destA, out=loadA);
    Mux16(x=instruction, y=aluOut, sel=destA, out=inA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

    And(x=instruction[4], y=instruction[15], out=destD);
    DRegister(in=aluOut, load=destD, out=outD);

    And(x=instruction[3], y=instruction[15], out=writeM);

    Or(x=zero, y=negative, out=notPositive);
    Not(x=notPositive, out=positive);

    And(x=instruction[2], y=instruction[15], out=jmpLt);
    And(x=negative, y=jmpLt, out=jlt);

    And(x=instruction[1], y=instruction[15], out=jmpEq);
    And(x=zero, y=jmpEq, out=jeq);

    And(x=instruction[0], y=instruction[15], out=jmpGt);
    And(x=positive, y=jmpGt, out=jgt);

    Or(x=jlt, y=jeq, out=j1);
    Or(x=j1, y=jgt, out=j2);
    Or(x=j1, y=j2, out=jmp);

    And(x=instruction[15], y=jmp, out=PCload);
    Not(x=PCload, out=PCinc);
    PC(x=outA, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}
